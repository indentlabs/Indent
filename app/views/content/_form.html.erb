<%= render 'content/form/errors', content: content %>

<div class="row">
  <div class="col s12">
    <div class="card hoverable">
      <div class="card-content">
        <div class="card-title center">
          <span class="right">
            <i class="material-icons <%= content.class.color %>-text"><%= content.class.icon %></i>
            <%= render 'content/form/actions_dropdown', content: content %>
          </span>

          <%= render 'content/form/title', content: content %>
        </div>

        <%# Tabs %>
        <ul class="hoverable tabs hide-on-small-only">
          <% content.class.attribute_categories.each do |category, data| %>
            <li class="tab col s12">
              <a href="#<%= category %>">
                <i class="material-icons hide-on-med-and-down" style="font-size: 18px; position: relative; top: 3px;"><%= data[:icon] %></i>
                <%= category.to_s.humanize %>
              </a>
            </li>
          <% end %>
        </ul>
        <ul class="tabs hide-on-med-and-up">
          <% content.class.attribute_categories.each do |category, data| %>
            <li class="tab col s12">
              <a href="#<%= category %>" class="tooltipped" data-position="bottom" data-delay="100" data-tooltip="<%= category.to_s.humanize %>">
                <i class="material-icons" style="font-size: 18px; position: relative; top: 3px;"><%= data[:icon] %></i>
              </a>
            </li>
          <% end %>
        </ul>
        <br />

        <%# Content panels %>
        <% content.class.attribute_categories.each do |category, data| %>
          <div id="<%= category %>" class="row">
            <% data[:attributes].each do |attribute| %>

              <% # Do some dynamic resizing of columns based on how many columns there are
                 # TODO: move this into some service or something? Dunno, doesn't belong here.

                s_width = 12
                m_width = 6
                l_width = 4

                if data[:attributes].length == 1
                  # If there's only one field on this tab, go full-width on all screen sizes
                  s_width = m_width = l_width = 12
                elsif data[:attributes].length == 2
                  # If there's two fields on this tab, go half-width on medium- and large-screens
                  s_width = 12
                  m_width = l_width = 6
                elsif data[:attributes].length > 2
                  # If there's at least 3 fields, use the defaults (detailed above)
                end
              %>

              <div class="col <%= "s#{s_width} m#{m_width} l#{l_width}" %>">

                <% value = content.send(attribute) %>
                <% if value.is_a?(ActiveRecord::Associations::CollectionProxy) %>
                  <%# Relation-setting UI %>
                  <% through_class = content.class.reflect_on_association(attribute).options[:through].to_s %>
                  <%= render 'content/form/relation_input', f: f, attribute: attribute, relation: through_class %>

                <% elsif attribute == 'archetype' %>
                  <div class="input-field">
                    <%= f.label attribute %><br />
                    <%= f.select attribute, options_for_select(t('archetypes'), selected: f.object.archetype), include_blank: true %>
                  </div>

                <% elsif attribute == 'universe_id' %>
                  <div class="input-field">
                    <%= f.label attribute %><br />
                    <%= f.select attribute, current_user.universes.sort_by(&:name).map { |u| [u.name, u.id] }.compact, include_blank: true, selected: (f.object.persisted? ? f.object.universe_id : session[:universe_id]) %>
                  </div>

                <% elsif attribute == 'privacy' %>
                  <div class="input-field">
                    <%= f.label attribute %><br />
                    <%= f.select attribute, [['Only visible to you', 'private'], ['Visible to anyone with the URL', 'public']] %>
                    <div class="help-text">
                      This setting applies to this universe and everything within it. If this universe is visible to others by URL, they will be able to click through and see the
                      characters, locations, and items within this universe also.
                    </div>
                  </div>

                <% elsif attribute == 'private_notes' %>
                  <div class="input-field content-field">
                    <%= f.label attribute, attribute.humanize.capitalize %>
                    <%= f.text_area attribute, class: "materialize-textarea", placeholder: 'Write as little or as much as you want!' %>
                    <div class="help-text">
                      Private notes are <em>always</em> visible to only you, even if content is made public and shared.
                    </div>
                  </div>

                <% elsif attribute == 'item_type' %>
                  <% potential_item_types = t('weapon_types') + t('shield_types') + t('axe_types') + t('bow_types') +
                    t('club_types') + t('flexible_weapon_types') + t('fist_weapon_types') + t('thrown_weapon_types') +
                    t('polearm_types') + t('shortsword_types') + t('sword_types') + t('other_item_types')
                  %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: potential_item_types %>

                <%# TODO: not make this so awful %>

                <% elsif attribute == 'skintone' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('skin_tones') %>

                <% elsif attribute == 'race' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('character_races') %>

                <% elsif attribute == 'eyecolor' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('eye_colors') %>

                <% elsif attribute == 'haircolor' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('hair_colors') %>

                <% elsif attribute == 'hairstyle' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('hair_styles') %>

                <% elsif attribute == 'facialhair' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('facial_hair_styles') %>

                <% elsif attribute == 'bodytype' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('body_types') %>

                <% elsif attribute == 'fave_weapon' %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute, autocomplete: t('weapon_types') + t('shield_types') + t('axe_types') + t('bow_types') +
                    t('club_types') + t('flexible_weapon_types') + t('fist_weapon_types') + t('thrown_weapon_types') +
                    t('polearm_types') + t('shortsword_types') + t('sword_types') %>

                <% else %>
                  <%= render 'content/form/text_input', f: f, attribute: attribute %>

                <% end %>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
      <div class="card-action center">
        <%= f.submit nil, class: "btn waves-effect waves-#{content.class.color}" %>
      </div>
    </div>
  </div>
</div>
